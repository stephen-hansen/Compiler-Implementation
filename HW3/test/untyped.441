class LISTNODE [
   fields val, next, isnull
   method getNext() with locals:
      return &this.next
   method getVal() with locals:
      return &this.val
   method isNull() with locals:
      return &this.isnull
]
class STACK [
   fields list
   method init() with locals stk, node:
      stk = @STACK
      node = @LISTNODE
      !node.isnull = 1
      !stk.list = node
      return stk
   method push(v) with locals tmp:
      tmp = @LISTNODE
      !tmp.isnull = 0
      !tmp.val = v
      !tmp.next = &this.list
      !this.list = tmp
      return 0
   method empty() with locals:
      return ^&this.list.isNull()
   method pop() with locals tmp:
      if ^&this.list.isNull(): {
         return 0 
      } else {
         tmp = ^&this.list.getVal()
         !this.list = ^&this.list.getNext()
         return tmp
      }
]
class QUEUE [
   fields sA, sB
   method init() with locals queue:
      queue = @QUEUE
      !queue.sA = ^@STACK.init()
      !queue.sB = ^@STACK.init()
      return queue
   method push(v) with locals:
      while (1 - ^&this.sA.empty()): {
         _ = ^&this.sB.push(^&this.sA.pop())
      }
      _ = ^&this.sA.push(v)
      while (1 - ^&this.sB.empty()): {
         _ = ^&this.sA.push(^&this.sB.pop())
      }
      return 0
   method empty() with locals:
      return ^&this.sA.empty()
   method pop() with locals:
      return ^&this.sA.pop()
]
class FIB [
   fields
   method fib(n) with locals:
      ifonly n: {
         ifonly (n - 1): {
            return (^this.fib((n - 1)) + ^this.fib((n - 2)))
         }
         return 1
      }
      return 0
]

main with i, stk, queue, fib:
   stk = ^@STACK.init()
   queue = ^@QUEUE.init()
   fib = 0
   i = 20
   while i: {
      _ = ^queue.push(i)
      _ = ^stk.push(i)
      i = (i - 1)
   }
   while (1 - ^queue.empty()): {
      print(^queue.pop())
   }
   while (1 - ^stk.empty()): {
      print(^stk.pop())
   }
   fib = @FIB
   print(^fib.fib(20))

